//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tic_tac_toe.Matchmaking {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Matchmaking.IServiceMatchmaking", CallbackContract=typeof(Tic_tac_toe.Matchmaking.IServiceMatchmakingCallback))]
    public interface IServiceMatchmaking {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMatchmaking/Connect", ReplyAction="http://tempuri.org/IServiceMatchmaking/ConnectResponse")]
        System.Tuple<int, int, bool> Connect(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMatchmaking/Connect", ReplyAction="http://tempuri.org/IServiceMatchmaking/ConnectResponse")]
        System.Threading.Tasks.Task<System.Tuple<int, int, bool>> ConnectAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMatchmaking/Disconnect", ReplyAction="http://tempuri.org/IServiceMatchmaking/DisconnectResponse")]
        void Disconnect(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMatchmaking/Disconnect", ReplyAction="http://tempuri.org/IServiceMatchmaking/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMatchmaking/SendMove", ReplyAction="http://tempuri.org/IServiceMatchmaking/SendMoveResponse")]
        void SendMove(int move, int lobbyID, int senderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMatchmaking/SendMove", ReplyAction="http://tempuri.org/IServiceMatchmaking/SendMoveResponse")]
        System.Threading.Tasks.Task SendMoveAsync(int move, int lobbyID, int senderID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceMatchmakingCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceMatchmaking/StartGame")]
        void StartGame();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceMatchmaking/MoveCallback")]
        void MoveCallback(int move);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceMatchmakingChannel : Tic_tac_toe.Matchmaking.IServiceMatchmaking, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceMatchmakingClient : System.ServiceModel.DuplexClientBase<Tic_tac_toe.Matchmaking.IServiceMatchmaking>, Tic_tac_toe.Matchmaking.IServiceMatchmaking {
        
        public ServiceMatchmakingClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceMatchmakingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceMatchmakingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMatchmakingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMatchmakingClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Tuple<int, int, bool> Connect(string nickname) {
            return base.Channel.Connect(nickname);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<int, int, bool>> ConnectAsync(string nickname) {
            return base.Channel.ConnectAsync(nickname);
        }
        
        public void Disconnect(int ID) {
            base.Channel.Disconnect(ID);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int ID) {
            return base.Channel.DisconnectAsync(ID);
        }
        
        public void SendMove(int move, int lobbyID, int senderID) {
            base.Channel.SendMove(move, lobbyID, senderID);
        }
        
        public System.Threading.Tasks.Task SendMoveAsync(int move, int lobbyID, int senderID) {
            return base.Channel.SendMoveAsync(move, lobbyID, senderID);
        }
    }
}
